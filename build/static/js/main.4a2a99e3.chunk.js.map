{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","a","callData","console","log","fetch","then","response","state","fetchedData","push","setState","catch","f","toString","this","t","className","style","height","borderRadius","display","justifyContent","alignItems","map","i","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,kC,4HCGtBC,G,8DAEnB,WAAYC,GAAI,IAAD,8BACb,cAAMA,IAYRC,SAAW,WACTC,QAAQC,IAAI,WACZC,MAAM,gEACHC,MAAK,SAAAC,GACJJ,QAAQC,IAAIG,GACZ,EAAKC,MAAMC,YAAYC,KAAKH,GAC5B,EAAKI,SAAS,CACZF,YAAa,EAAKD,MAAMC,iBAEzBG,OAAM,SAAAC,GACPV,QAAQC,IAAIS,GACZ,EAAKL,MAAMC,YAAYC,KAAKG,EAAEC,YAC9B,EAAKH,SAAS,CACZF,YAAa,EAAKD,MAAMC,kBAxB9B,EAAKD,MAAQ,CACXC,YAAa,IAHF,E,gEASbN,QAAQC,IAAI,WACZW,KAAKb,a,+BAsBL,IAAMc,EAAID,KAAKP,MAAMC,YAErB,OADAN,QAAQC,IAAIY,GACL,yBAAKC,UAAU,2CACpBC,MAAO,CAAEC,OAAQ,UACjB,yBAAKF,UAAU,wBACb,wBAAIA,UAAU,OAAd,0BAEF,yBAAKA,UAAU,iCAAiCC,MAAO,CAAEC,OAAQ,SAC/D,yBAAKF,UAAU,eAAeC,MAAO,CAAEC,OAAQ,MAAOC,aAAc,QAASC,QAAS,OAAQC,eAAgB,SAAUC,WAAY,WACpI,yBAAKN,UAAU,OAGLF,KAAKP,MAAMC,YAAYe,KAAI,SAACvB,EAAEwB,GAE5B,OAAO,yBAAKR,UAAU,OAAShB,EAAxB,WAQrB,yBAAKgB,UAAU,OACX,yBAAKA,UAAU,+BACb,4BAAQS,QAASX,KAAKb,UAAtB,kB,GA1DqByB,IAAMC,YCSnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAgC,GACLzC,QAAQyC,MAAMA,EAAMC,a","file":"static/js/main.4a2a99e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './custom.css'\nexport default class App extends React.Component {\n\n  constructor(a) {\n    super(a)\n    this.state = {\n      fetchedData: []\n    }\n  }\n\n  componentDidMount() {\n\n    console.log(\"mounted\")\n    this.callData();\n  }\n\n  callData = () => {\n    console.log(\"calling\");\n    fetch(\"https://oh1.cf.siemens.de/sap/opu/odata/SIE/CW_ROSA_P01_SRV/\")\n      .then(response => {\n        console.log(response);\n        this.state.fetchedData.push(response)\n        this.setState({\n          fetchedData: this.state.fetchedData\n        })\n      }).catch(f => {\n        console.log(f);\n        this.state.fetchedData.push(f.toString())\n        this.setState({\n          fetchedData: this.state.fetchedData\n        })\n      });\n  }\n\n  render() {\n    const t = this.state.fetchedData;\n    console.log(t);\n    return <div className=\"container-fluid bg-dark wrapper clearfix\"\n      style={{ height: \"100vh\" }}>\n      <div className=\"row myDiv bg-success\" >\n        <h1 className=\"col\">Testing oh from react</h1>\n      </div>\n      <div className=\"row text-dark bg-warning myDiv\" style={{ height: \"30vh\" }} >\n        <div className=\"col bg-info \" style={{ height: \"90%\", borderRadius: \"100px\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\n        <div className=\"row\">\n            {\n            \n                  this.state.fetchedData.map((a,i)=>{\n\n                    return <div className=\"col\" >{ a} </div>\n                  })\n                }\n            </div>\n          \n        </div>\n       \n      </div>\n      <div className=\"row\" >\n          <div className=\"col-sm-4 col-md-3 col-lg-10\">\n            <button onClick={this.callData} >CAAAAAl</button>\n          </div>\n        </div>\n    </div>\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}